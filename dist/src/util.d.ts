import { Node, Statement, LiteralStringExpression, LiteralInfinityExpression, LiteralNumericExpression, LiteralNullExpression, LiteralRegExpExpression, Script, UnaryExpression, ComputedMemberAssignmentTarget, StaticMemberAssignmentTarget, StaticMemberExpression, ComputedMemberExpression, IdentifierExpression } from 'shift-ast';
import { SelectorOrNode } from './types';
import { Scope } from 'shift-scope';
import { IdGenerator } from './id-generator';
export declare function copy(object: any): any;
export declare function isString(input: any): input is string;
export declare function isFunction(input: any): input is Function;
export declare function isArray(input: any): input is any[];
export declare function isShiftNode(input: any): input is Node;
export declare function isStatement(input: any): input is Statement;
export declare function isLiteral(input: any): input is LiteralStringExpression | LiteralInfinityExpression | LiteralNumericExpression | LiteralNullExpression | LiteralRegExpExpression | UnaryExpression;
export declare function findNodes(ast: Node, input: SelectorOrNode): any;
export declare function extractStatement(tree: Script): Statement;
export declare function extractExpression(tree: Script): import("shift-ast").Expression;
export declare function renameScope(scope: Scope, idGenerator: IdGenerator, parentMap: WeakMap<Node, Node>): void;
export declare function buildParentMap(ast: Node): WeakMap<object, any>;
export declare function isMemberAssignment(node: Node): node is ComputedMemberAssignmentTarget | StaticMemberAssignmentTarget;
export declare function isMemberExpression(node: Node): node is ComputedMemberExpression | StaticMemberExpression;
export declare function isDeepSimilar(a: any, b: any): boolean;
export declare function getRootIdentifier(expr: StaticMemberExpression | ComputedMemberExpression | StaticMemberAssignmentTarget | ComputedMemberAssignmentTarget | IdentifierExpression): IdentifierExpression;
